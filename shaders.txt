
class GouraudShader : public IShader {
public:
	Model *model;
	mat4 uniform_model;
	mat4 uniform_view;
	mat4 uniform_proj;

	virtual vec4 vertex(int iface, int nthvert) {
		vec3 n = model->normal(iface, nthvert).normalize();
		varying_intensity[nthvert] = std::max(0.0, dot(n, light_dir)); // get diffuse lighting intensity
		vec4 gl_Vertex = vec4(model->vert(iface, nthvert), 1.0);		// read the vertex from .obj file
		return uniform_proj * uniform_view * uniform_model * gl_Vertex;		// transform it to screen coordinates
	}

	virtual bool fragment(vec3 bar, TGAColor &color) {
		float intensity = dot(varying_intensity, bar);	// interpolate intensity for the current pixel
		color = TGAColor(255, 255, 255) * intensity;
		return false;		// don't discard the pixel;
	}
private:
	vec3 varying_intensity;		// writen by vertex shader, read by fragment shader
};


// Phong shading
class PhongShader : public IShader {
public:
	mat3 varying_normal;

	virtual vec4 vertex(int iface, int nthvert) {
		varying_normal.set_col(nthvert, model->normal(iface, nthvert).normalize());
		vec4 gl_Vertex = embed<4>(model->vert(iface, nthvert));
		return Viewport * Projection * ModelView * gl_Vertex;
	}

	virtual bool fragment(vec3 bar, TGAColor &color) {
		vec3 n = (varying_normal * bar).normalize();
		float intensity = n * light_dir;
		color = TGAColor(255, 255, 255) * intensity;
		return false;
	}
};

// Gouraud shading with texture
class Shader : public IShader {
public:
	virtual vec4 vertex(int iface, int nthvert) {
		varying_intensity[nthvert] = std::max(0.0, model->normal(iface, nthvert).normalize() * light_dir);
		varying_uv.set_col(nthvert, model->uv(iface, nthvert));
		vec4 gl_Vertex = embed<4>(model->vert(iface, nthvert));
		return Viewport * Projection * ModelView * gl_Vertex;
	}

	virtual bool fragment(vec3 bar, TGAColor& color) {
		float intensity = varying_intensity * bar;
		vec2 frag_uv = varying_uv * bar;
		color = model->diffuse(frag_uv) * intensity;
		return false;
	}
private:
	vec3 varying_intensity;
	mat<2, 3> varying_uv;
};

// diffuse and no specular
class Shader : public IShader {
public:
	mat4 uniform_model;
	mat4 uniform_view;
	mat4 uniform_projection;
	mat4 uniform_viewport;
	mat4 uniform_MIT;

	virtual vec4 vertex(int iface, int nthvert) {
		varying_uv.set_col(nthvert, model->uv(iface, nthvert));
		vec4 gl_Vertex = embed<4>(model->vert(iface, nthvert));
		return uniform_viewport * uniform_projection * uniform_view * uniform_model * gl_Vertex;
	}

	virtual bool fragment(vec3 bar, TGAColor& color) {
		vec2 frag_uv = varying_uv * bar;
		// vec3 n = proj<3>(uniform_MIT * embed<4>(model->normal(frag_uv), 0.0)).normalize();
		vec3 n = vec3(uniform_MIT * vec4(model->normal(frag_uv), 0.0)).normalize();
		vec3 l = light_dir.normalize();

		float diff = std::max(0.0, n * l);
		// color = model->diffuse(frag_uv) * diff;
		color = model->diffuse(frag_uv) *diff ;
		
		return false;
	}

private:
	mat<2, 3> varying_uv;
};

// ambient and diffuse and specular
class Shader : public IShader {
public:
	mat4 uniform_model;
	mat4 uniform_view;
	mat4 uniform_projection;
	mat4 uniform_viewport;
	mat4 uniform_MIT;
	virtual vec4 vertex(int iface, int nthvert) {
		varying_uv.set_col(nthvert, model->uv(iface, nthvert));
		vec4 gl_Vertex = embed<4>(model->vert(iface, nthvert));
		varying_frag_pos.set_col(nthvert, uniform_model * gl_Vertex);
		return uniform_viewport * uniform_projection * uniform_view * uniform_model * gl_Vertex;
	}

	virtual bool fragment(vec3 bar, TGAColor& color) {
		vec2 frag_uv = varying_uv * bar;
		vec3 frag_pos = vec3(varying_frag_pos * bar);
		// vec3 n = proj<3>(uniform_MIT * embed<4>(model->normal(frag_uv))).normalize();
		vec3 n = vec3(uniform_MIT * vec4(model->normal(frag_uv), 0.0)).normalize();
		vec3 l = light_dir.normalize();
		vec3 r = reflect(n, -l);
		vec3 v = (eye - frag_pos).normalize();

		float spec = pow(std::max(0.0, r * v), model->specular(frag_uv));
		float diff = std::max(0.0, n * l);
		float tmp = model->specular(frag_uv);

		TGAColor c = model->diffuse(frag_uv);
		for (int i = 0; i < 3; ++i)
			color[i] = std::min(5 + c[i] * (diff + 0.6 * spec), 255.0);

		return false;
	}

private:
	mat<2, 3> varying_uv;
	mat<4, 3> varying_frag_pos;
};

// Phong shading and tangent space normal map
class Shader : public IShader {
public:
	mat4 uniform_model;
	mat4 uniform_view;
	mat4 uniform_projection;
	mat4 uniform_viewport;
	mat4 uniform_MIT;

	virtual vec4 vertex(int iface, int nthvert) {
		varying_uv.set_col(nthvert, model->uv(iface, nthvert));
		varying_normal.set_col(nthvert, model->normal(iface, nthvert));
		vec4 gl_Vertex = embed<4>(model->vert(iface, nthvert));
		gl_Vertex = uniform_model * gl_Vertex;
		varying_frag_pos.set_col(nthvert, gl_Vertex);
		varying_ndc_tri.set_col(nthvert, vec3(gl_Vertex / gl_Vertex[3]));
		return uniform_viewport * uniform_projection * uniform_view * gl_Vertex;
	}

	virtual bool fragment(vec3 bar, TGAColor& color) {
		vec2 frag_uv = varying_uv * bar;
		vec3 frag_pos = vec3(varying_frag_pos * bar);

		vec3 n = calc_normal(bar);
		vec3 l = light_dir.normalize();
		vec3 r = reflect(n, -l);
		vec3 v = (eye - frag_pos).normalize();

		float spec = pow(std::max(0.0, r * v), model->specular(frag_uv));
		float diff = std::max(0.0, n * l);
		float tmp = model->specular(frag_uv);

		TGAColor c = model->diffuse(frag_uv);
		for (int i = 0; i < 3; ++i)
			color[i] = std::min(5 + c[i] * (diff + 0.6 * spec), 255.0);

		return false;
	}


private:
	mat<2, 3> varying_uv;
	mat<4, 3> varying_frag_pos;
	mat<3, 3> varying_normal;
	mat<3, 3> varying_ndc_tri;

	// tangent space to world space
	vec3 calc_normal(vec3 bar) {
		vec2 frag_uv = varying_uv * bar;
		vec3 bn = (varying_normal * bar).normalize();
		mat3 A;
		A[0] = varying_ndc_tri.col(1) - varying_ndc_tri.col(0);
		A[1] = varying_ndc_tri.col(2) - varying_ndc_tri.col(0);
		A[2] = bn;
		A = A.invert();

		vec3 i = A * vec3(varying_uv[0][1] - varying_uv[0][0], varying_uv[0][2] - varying_uv[0][0], 0);
		vec3 j = A * vec3(varying_uv[1][1] - varying_uv[1][0], varying_uv[1][2] - varying_uv[1][0], 0);
		mat3 B;
		B.set_col(0, i.normalize());
		B.set_col(1, j.normalize());
		B.set_col(2, bn);

		vec3 n = (B * model->normal(frag_uv)).normalize();
		return n;
	}
};

// Blinn-Phong Shading and tangent space normal map
class Shader : public IShader {
public:
	mat4 uniform_model;
	mat4 uniform_view;
	mat4 uniform_projection;
	mat4 uniform_viewport;
	mat4 uniform_MIT;

	virtual vec4 vertex(int iface, int nthvert) {
		varying_uv.set_col(nthvert, model->uv(iface, nthvert));
		varying_normal.set_col(nthvert, model->normal(iface, nthvert));
		vec4 gl_Vertex = embed<4>(model->vert(iface, nthvert));
		gl_Vertex = uniform_model * gl_Vertex;
		varying_frag_pos.set_col(nthvert, gl_Vertex);
		varying_ndc_tri.set_col(nthvert, vec3(gl_Vertex / gl_Vertex[3]));
		return uniform_viewport * uniform_projection * uniform_view * gl_Vertex;
	}

	virtual bool fragment(vec3 bar, TGAColor& color) {
		vec2 frag_uv = varying_uv * bar;
		vec3 frag_pos = vec3(varying_frag_pos * bar);

		vec3 n = calc_normal(bar);
		vec3 l = light_dir.normalize();
		vec3 v = (eye - frag_pos).normalize();
		// vec3 r = reflect(n, -l);
		vec3 r = (v + l).normalize();

		float spec = pow(std::max(0.0, r * n), model->specular(frag_uv));
		// float spec = 0;
		float diff = std::max(0.0, n * l);
		float tmp = model->specular(frag_uv);

		TGAColor c = model->diffuse(frag_uv);
		for (int i = 0; i < 3; ++i) {
			color[i] = std::min(5 + c[i] * (diff + 0.6 * spec), 255.0);
		}

		return false;
	}


private:
	mat<2, 3> varying_uv;
	mat<4, 3> varying_frag_pos;
	mat<3, 3> varying_normal;
	mat<3, 3> varying_ndc_tri;

	// tangent space to world space
	vec3 calc_normal(vec3 bar) {
		vec2 frag_uv = varying_uv * bar;
		vec3 bn = (varying_normal * bar).normalize();
		mat3 A;
		A[0] = varying_ndc_tri.col(1) - varying_ndc_tri.col(0);
		A[1] = varying_ndc_tri.col(2) - varying_ndc_tri.col(0);
		A[2] = bn;
		A = A.invert();

		vec3 i = A * vec3(varying_uv[0][1] - varying_uv[0][0], varying_uv[0][2] - varying_uv[0][0], 0);
		vec3 j = A * vec3(varying_uv[1][1] - varying_uv[1][0], varying_uv[1][2] - varying_uv[1][0], 0);
		mat3 B;
		B.set_col(0, i.normalize());
		B.set_col(1, j.normalize());
		B.set_col(2, bn);

		vec3 n = (B * model->normal(frag_uv)).normalize();
		return n;
	}
};

// shadow
class DepthShader : public IShader {
public:
	Model *model = nullptr;
	mat4 uniform_model;
	mat4 uniform_view;
	mat4 uniform_projection;

	virtual vec4 vertex(int iface, int nthvert) {
		vec4 gl_Vertex = vec4(model->vert(iface, nthvert), 1.0);
		return uniform_projection * uniform_view * uniform_model * gl_Vertex;
	}

	virtual bool fragment(vec3 bar, TGAColor& color) {
		return false;
	}
private:

};

// Blinn-Phong Shading and tangent space normal map
class Shader : public IShader {
public:
	Model *model = nullptr;
	TGAImage *shadow_map;
	mat4 uniform_model;
	mat4 uniform_view;
	mat4 uniform_projection;
	mat4 uniform_vp;
	mat4 uniform_shadow;

	virtual vec4 vertex(int iface, int nthvert) {
		varying_uv.set_col(nthvert, model->uv(iface, nthvert));
		varying_normal.set_col(nthvert, model->normal(iface, nthvert));
		vec4 gl_Vertex = vec4(model->vert(iface, nthvert), 1.0);
		gl_Vertex = uniform_model * gl_Vertex;
		varying_pos.set_col(nthvert, vec3(gl_Vertex));
		return uniform_projection * uniform_view * gl_Vertex;
	}

	virtual bool fragment(vec3 bar, TGAColor& color) {
		vec2 frag_uv = varying_uv * bar;
		vec3 pos = vec3(varying_pos * bar);	// fragment position in world space

		float shadow = 0.3 + 0.7 * !is_shadow(bar);

		vec3 n = calc_normal(bar);
		vec3 l = light_dir.normalize();
		vec3 v = (eye - pos).normalize();
		vec3 r = (v + l).normalize();

		float spec = pow(std::max(0.0, dot(r, n)), model->specular(frag_uv));
		float diff = std::max(0.0, dot(n, l));

		TGAColor c = model->diffuse(frag_uv);
		for (int i = 0; i < 3; ++i) {
			color[i] = std::min<float>(20 + c[i] * shadow * (1.2 * diff + .6 * spec), 255);
		}
		color[3] = c[3];
		color.bytes_per_pixel = c.bytes_per_pixel;

		return false;
	}


private:
	mat<2, 3> varying_uv;
	mat<3, 3> varying_pos;
	mat<3, 3> varying_normal;

	// tangent space to world space
	vec3 calc_normal(vec3 bar) {
		vec2 frag_uv = varying_uv * bar;
		vec3 bn = (varying_normal * bar).normalize();
		mat3 A;
		A[0] = varying_pos.col(1) - varying_pos.col(0);
		A[1] = varying_pos.col(2) - varying_pos.col(0);
		A[2] = bn;
		A = A.invert();

		vec3 i = A * vec3(varying_uv[0][1] - varying_uv[0][0], varying_uv[0][2] - varying_uv[0][0], 0);
		vec3 j = A * vec3(varying_uv[1][1] - varying_uv[1][0], varying_uv[1][2] - varying_uv[1][0], 0);
		mat3 B;
		B.set_col(0, i.normalize());
		B.set_col(1, j.normalize());
		B.set_col(2, bn);

		vec3 n = (B * model->normal(frag_uv)).normalize();
		return n;
	}

	float is_shadow(vec3& bar) {

		vec3 p = varying_pos * bar;
		vec4 p1 = uniform_shadow * vec4(p, 1.0);
		p1 = p1 / p1.w;
		float cur_depth = p1.z;
		p1 = 0.5 * p1 + 0.5;
		float closest_depth = texture(shadow_map, vec2(p1.x, p1.y))[0];

		// shadow bias 
		float bias = 0.05;
		cur_depth += bias;
		cur_depth = 127.5 * cur_depth + 127.5;
		return cur_depth < closest_depth ? 1.0 : 0.0;
	}
};
