
class GouraudShader : public IShader {
public:
	vec3 varying_intensity;		// writen by vertex shader, read by fragment shader

	virtual vec4 vertex(int iface, int nthvert) {
		vec3 n = model->normal(iface, nthvert).normalize();
		varying_intensity[nthvert] = std::max(0.0, n * light_dir); // get diffuse lighting intensity
		vec4 gl_Vertex = embed<4>(model->vert(iface, nthvert));		// read the vertex from .obj file
		return Viewport * Projection * ModelView * gl_Vertex;		// transform it to screen coordinates
	}

	virtual bool fragment(vec3 bar, TGAColor &color) {
		float intensity = varying_intensity * bar;	// interpolate intensity for the current pixel
		color = TGAColor(255, 255, 255) * intensity;
		return false;		// don't discard the pixel;
	}
};

class PhongShader : public IShader {
public:
	vec3 varying_normal[3];

	virtual vec4 vertex(int iface, int nthvert) {
		varying_normal[nthvert] = model->normal(iface, nthvert).normalize();
		vec4 gl_Vertex = embed<4>(model->vert(iface, nthvert));
		return Viewport * Projection * ModelView * gl_Vertex;
	}

	virtual bool fragment(vec3 bar, TGAColor &color) {
		vec3 n(0, 0, 0);
		for (int i = 0; i < 3; ++i)
			n = n + (bar[i] * varying_normal[i]);
		float intensity = n * light_dir;
		color = TGAColor(255, 255, 255) * intensity;
		return false;
		// return intensity <= 0.0;
	}
};


// Gouraud shading with texture
class Shader : public IShader {
public:
	virtual vec4 vertex(int iface, int nthvert) {
		varying_intensity[nthvert] = std::max(0.0, model->normal(iface, nthvert).normalize() * light_dir);
		varying_uv.set_col(nthvert, model->uv(iface, nthvert));
		vec4 gl_Vertex = embed<4>(model->vert(iface, nthvert));
		return Viewport * Projection * ModelView * gl_Vertex;
	}

	virtual bool fragment(vec3 bar, TGAColor& color) {
		float intensity = varying_intensity * bar;
		vec2 frag_uv = varying_uv * bar;
		color = model->diffuse(frag_uv);
		return false;
	}
private:
	vec3 varying_intensity;
	mat<2, 3> varying_uv;
};
